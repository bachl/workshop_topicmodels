[
["modellinterpretation-und-darstellung.html", "Abschnitt 4 Modellinterpretation und -darstellung 4.1 Test der Modellqualität 4.2 Interpretation des Modells 4.3 Darstellung des Modells 4.4 Weitere Analysen: Prädiktoren der Topic-Prävalenz und Topic-Cluster", " Abschnitt 4 Modellinterpretation und -darstellung 4.1 Test der Modellqualität {oolong} ist ein recht neues Paket, das die Durchführung von standardisierten Tests der Topic-Qualität erleichtert. Ich habe es selbst bisher noch nicht in produktiven Projekten eingesetzt, werde es aber in allen zukünftigen Projekten tun. Infos zur technischen Umsetzung gibt es hier: https://github.com/chainsawriot/oolong/blob/master/overview_gh.md. Es werden zwei Tests angeboten: Der word intrusion test zeigt für jedes Topic die typischsten Features an und fügt zusätzlich ein Wort hinzu, dass nicht typisch für das Topic ist (intruder). Die Tester*innen müssen raten, welches Wort nicht zu den anderen passt. Je größer der Anteil der richtig erkannten intruder (Hier als precision bezeichnet), desto besser lassen sich die Topics anhand der typischen Features interpretieren. Bei mehreren Tester*innen wird zusätzlich der aus der manuellen Inhaltsanalyse bekannte Koeffizient der Intercoder-Reliabilität Krippendorffs \\(\\alpha\\) ausgegeben. Der topic intrusion test zeigt eine Auswahl von Dokumenten aus dem Korpus. Dazu werden eine vorgegebene Zahl von Topics angezeigt, die in einem Dokument am wahrscheinlichsten enthalten sind. Ein weiteres Topic wird angezeigt, das in diesem Dokument nicht enthalten ist. Die Tester*innen müssen raten, welches Topic nicht zum Dokument passt. Als Ergebnis werden die topic log odds (TLO) berichtet. Sie quantifizieren die Wahrscheinlichkeit, dass das unpassende Topic gewählt wurde, korrigiert um die Wahrscheinlichkeit, dass das unpassende Topic einfach nur zufällig geraten wurde. Perfektes Erkennen der falschen Topics bei allen Dokumenten ergibt \\(TLO = 0\\). Diese Tests sollten von mehreren Personen durchgeführt werden. Im Idealfall werden die Modelle auch durch Personen getestet, die nicht am Projekt (oder zumindest nicht an der Modellierung) beteiligt waren, um die intersubjektive Nachvollziehbarkeit der Interpretationen zu testen. Aber schon formale Tests nur mit den Projektbeteiligten schlagen den heute üblichen Standard um Weiten. Bisher werden zur Validierung vor allem informelle Diskussionen eingesetzt (Maier et al. 2018) — so auch in unserer Beispielstudie. Der folgende Code zeigt das Erstellen, durchführen und Auswerten der Tests. Da die Tests interaktiv sind, wird er hier nicht ausgeführt. Ich zeige das Vorgehen in einem Video im LMS [kommt nach Fertigstellen des Textmaterials]. m37 = read_rds(&quot;R/data/model37.rds&quot;) out = read_rds(&quot;R/data/out.rds&quot;) # Erstellen eines Tests m37_oolong = create_oolong( input_model = m37, # Modell, das wir testen wollen input_corpus = out$meta$txt, # Korpus, auf dem Modell basiert; können wir aus &quot;out&quot; für stminsights nehmen use_frex_words = TRUE, # FREX-Features in beiden Tests nutzen n_top_terms = 5, # Zahl der korrekten Features im word intrusion test difficulty = 0.5, # Schwierigkeit des word intrusion tests; 0.5 = frexweight, das wir zur Interpretation genutzt haben bottom_terms_percentile = 0.4, # Definition der intruder words; hier: haben theta &lt; 0.4 n_topiclabel_words = 10, # Zahl der Features, die als Label im topic intrusion test angezeigt werden n_top_topics = 2, # Zahl der besten Topics, die für ein Dokument gezeigt werden exact_n = 5 # Zahl der Dokumente für topic intrusion test (alternativ frac für Anteil); in echtem Test mehr Dokumente codieren, hier nur 5, damit Demo nicht so lange dauert ) # Ausführen der Tests; Durchführen interaktiv in Viewer m37_oolong$do_word_intrusion_test() m37_oolong$do_topic_intrusion_test() # Beenden des Tests m37_oolong$lock() # Test-Ergebnisse m37_oolong_res = m37_oolong %&gt;% summarise_oolong() m37_oolong_res 4.2 Interpretation des Modells Zur Interpretation des ausgewählten Modells zunächst ein wichtiger Hinweis: Vergesst nicht, dass ein Topic Model nur eine statistische Repräsentation des Textkorpuses ist. 4.3 Darstellung des Modells Einige nützliche Plots # Data m37 = read_rds(&quot;R/data/model37.rds&quot;) m37_labels = read_csv(&quot;R/data/labels_k37.csv&quot;) m37_labels = m37_labels %&gt;% mutate(label = str_c(topic, label, sep = &quot;: &quot;)) # Prävelenz der Topics m37_gamma = m37 %&gt;% tidy(&quot;gamma&quot;) # Frex Terms m37_frex = m37 %&gt;% labelTopics(n = 10) %&gt;% pluck(&quot;frex&quot;) %&gt;% as_tibble(.name_repair = ~ paste0(&quot;r&quot;, 1:10)) %&gt;% mutate(topic = 1:n()) %&gt;% gather(rank, frex_term, -topic) %&gt;% group_by(topic) %&gt;% summarise(frex_terms = paste0(frex_term, collapse = &quot;, &quot;)) # Plot m37_gamma %&gt;% group_by(topic) %&gt;% summarise(P = mean(gamma), n = sum(gamma)) %&gt;% left_join(m37_labels) %&gt;% left_join(m37_frex) %&gt;% mutate(label = reorder(label, P)) %&gt;% ggplot(aes(P, label, label = frex_terms)) + geom_bar(stat = &quot;identity&quot;) + scale_x_continuous(labels = scales::percent_format(accuracy = 1), expand = c(0, 0), limits = c(0, 0.1)) + geom_text(hjust = 0, nudge_x = 5e-04, size = 3) + labs(x = &quot;Anteil des Topics am gesamten Korpus&quot;, y = NULL) Figure 4.1: Zur vollen Ansicht in neuem Tab öffnen 4.4 Weitere Analysen: Prädiktoren der Topic-Prävalenz und Topic-Cluster Schätzen der Veränderung der Topics über die Zeit Wichtig: Prädiktoren sollten bereits in der Spezifikation des Topic Modells (siehe Abschnitt 3.1) enthalten sein. Schätzung der Zusammenhänge mit anderen Prädiktoren zwar möglich, aber nicht ideal (Roberts, Stewart, and Tingley 2019). Darstellung dieser Ergebnisse # Data m37 = read_rds(&quot;R/data/model37.rds&quot;) m37_labels = read_csv(&quot;R/data/labels_k37.csv&quot;) m37_labels = m37_labels %&gt;% mutate(label = str_c(topic, label, sep = &quot;: &quot;)) out = read_rds(&quot;R/data/out.rds&quot;) # Effect Objekt if (file.exists(&quot;R/data/m37_effects.rds&quot;)) { # Laden der Effekt-Schätzung m37_effects = read_rds(&quot;R/data/m37_effects.rds&quot;) } else { # Effekt-Schätzung m37_effects = m37 %&gt;% estimateEffect(1:37 ~ s(date_num), stmobj = ., metadata = out$meta) saveRDS(m37_effects, &quot;R/data/m37_effects.rds&quot;) } # Daten für Plot eff_plot_data = m37_effects %&gt;% get_effects(variable = &quot;date_num&quot;, type = &quot;continuous&quot;) %&gt;% mutate(topic = as.integer(as.character(topic)), date = as_date(value + max(as.numeric(out$meta$postdate)))) %&gt;% left_join(m37_labels) %&gt;% mutate(label = reorder(label, topic, mean)) # Plot: Alle Topics über die Zeit plt1 = eff_plot_data %&gt;% ggplot(aes(date, proportion, ymin = lower, ymax = upper)) + geom_ribbon(alpha = 0.5) + geom_line() + facet_wrap(&quot;label&quot;, ncol = 2) + scale_y_continuous(labels = scales::percent_format(), limits = c(0, 0.08)) # Plot: Grippe und Evidenz plt2 = eff_plot_data %&gt;% filter(topic %in% c(16, 28)) %&gt;% ggplot(aes(date, proportion, ymin = lower, ymax = upper, group = label)) + geom_ribbon(alpha = 0.5) + geom_line(aes(color = label)) + scale_y_continuous(labels = scales::percent_format(), limits = c(0, 0.08)) Figure 4.2: Zur vollen Ansicht in neuem Tab öffnen Figure 4.3: Zur vollen Ansicht in neuem Tab öffnen Cluster-Analyse des gemeinsamen Auftretens von Topics Darstellung dieser Ergebnisse # Data m37 = read_rds(&quot;R/data/model37.rds&quot;) m37_labels = read_csv(&quot;R/data/labels_k37.csv&quot;) m37_labels = m37_labels %&gt;% mutate(label = str_c(topic, label, sep = &quot;: &quot;)) # Hierarchische CLusteranalyse des gemeinsamen Auftretens von Topics in Dokumenten m37_dist = textmineR::CalcHellingerDist(m37$theta, by_rows = FALSE) clusters = hclust(as.dist(m37_dist), &quot;ward.D2&quot;) clusters$labels = m37_labels$label # Dendogramm ggdendro::ggdendrogram(clusters, rotate = TRUE) + labs(title = NULL) + scale_y_continuous(limits = c(0,1), expand = c(0,0), name = &quot;Distanz&quot;) + theme(axis.text.y = element_text(size = 10, colour = &quot;black&quot;), axis.title = element_text(size = 14, face = &quot;bold&quot;)) Figure 4.4: Zur vollen Ansicht in neuem Tab öffnen # Plot mit 7 Topic-Clustern m37_gamma %&gt;% group_by(topic) %&gt;% summarise(P = mean(gamma), n = sum(gamma)) %&gt;% mutate(grp = case_when(topic %in% c(21, 10, 11, 7, 16) ~ 1, topic %in% c(27, 1, 2, 35, 24) ~ 2, topic %in% c(31, 8, 19) ~ 3, topic %in% c(34, 15, 30, 23, 6, 33, 36) ~ 4, topic %in% c(28, 17, 12, 9, 18) ~ 5, topic %in% c(32, 29, 37, 5, 3, 13, 14, 26, 20, 4) ~ 6, topic %in% c(25, 22) ~ 7)) %&gt;% left_join(m37_labels) %&gt;% left_join(m37_frex) %&gt;% mutate(label = reorder(label, P)) %&gt;% ggplot(aes(P, label, label = frex_terms, fill = factor(grp))) + geom_bar(stat = &quot;identity&quot;, show.legend = FALSE) + scale_x_continuous(labels = scales::percent_format(accuracy = 1), expand = c(0, 0), limits = c(0, 0.1)) + geom_text(hjust = 0, nudge_x = 5e-04, size = 3) + labs(x = &quot;Anteil des Topics am gesamten Korpus&quot;, y = NULL) + facet_grid(grp ~ ., scales = &quot;free_y&quot;, space = &quot;free_y&quot;) Figure 4.5: Zur vollen Ansicht in neuem Tab öffnen Literatur "]
]
